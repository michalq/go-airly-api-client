// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AveragedValues AveragedValues
// swagger:model AveragedValues
type AveragedValues struct {

	// Left bound of the time period over which average measurements were calculated, inclusive, always UTC
	// Format: date-time
	FromDateTime *strfmt.DateTime `json:"fromDateTime,omitempty"`

	// List of indexes calculated from the values available. Indexes are defined by relevant national and international institutions, e.g. EU, GIOÅš or US EPA
	Indexes []*Index `json:"indexes"`

	// List of 'standard' values, or 'limits' for pollutants that should not be exceeded over certain period of time. Limits are defined by relevant national and international institutions, like e.g. WHO or EPA. For each standard limit in this list there is also a corresponding measurement expressed as a percent value of the limit
	Standards []*Standard `json:"standards"`

	// Right bound of the time period over which average measurements were calculated, exclusive, always UTC
	// Format: date-time
	TillDateTime *strfmt.DateTime `json:"tillDateTime,omitempty"`

	// List of raw measurements, averaged over specified period. Measurement types available in this list depend on the capabilities of the queried installation, e.g. particulate matter (PM1, PM25, PM10), gases (CO, NO2, SO2, O3) or weather conditions (temperature, humidity, pressure)
	Values []*Value `json:"values"`
}

// Validate validates this averaged values
func (m *AveragedValues) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFromDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIndexes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStandards(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTillDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AveragedValues) validateFromDateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.FromDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("fromDateTime", "body", "date-time", m.FromDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AveragedValues) validateIndexes(formats strfmt.Registry) error {

	if swag.IsZero(m.Indexes) { // not required
		return nil
	}

	for i := 0; i < len(m.Indexes); i++ {
		if swag.IsZero(m.Indexes[i]) { // not required
			continue
		}

		if m.Indexes[i] != nil {
			if err := m.Indexes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("indexes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AveragedValues) validateStandards(formats strfmt.Registry) error {

	if swag.IsZero(m.Standards) { // not required
		return nil
	}

	for i := 0; i < len(m.Standards); i++ {
		if swag.IsZero(m.Standards[i]) { // not required
			continue
		}

		if m.Standards[i] != nil {
			if err := m.Standards[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("standards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AveragedValues) validateTillDateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.TillDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("tillDateTime", "body", "date-time", m.TillDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AveragedValues) validateValues(formats strfmt.Registry) error {

	if swag.IsZero(m.Values) { // not required
		return nil
	}

	for i := 0; i < len(m.Values); i++ {
		if swag.IsZero(m.Values[i]) { // not required
			continue
		}

		if m.Values[i] != nil {
			if err := m.Values[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("values" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AveragedValues) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AveragedValues) UnmarshalBinary(b []byte) error {
	var res AveragedValues
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
