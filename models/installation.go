// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Installation Installation
// swagger:model Installation
type Installation struct {

	// Address
	// Required: true
	Address *Address `json:"address"`

	// Indicates if this is Airly sensor
	// Required: true
	Airly bool `json:"airly"`

	// Elevation
	// Required: true
	Elevation float64 `json:"elevation"`

	// ID of the installation
	// Required: true
	ID int32 `json:"id"`

	// Location
	// Required: true
	Location *Coordinates `json:"location"`

	// Sponsor
	// Required: true
	Sponsor *Sponsor `json:"sponsor"`
}

// Validate validates this installation
func (m *Installation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAirly(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElevation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSponsor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Installation) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("address", "body", m.Address); err != nil {
		return err
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *Installation) validateAirly(formats strfmt.Registry) error {

	if err := validate.Required("airly", "body", bool(m.Airly)); err != nil {
		return err
	}

	return nil
}

func (m *Installation) validateElevation(formats strfmt.Registry) error {

	if err := validate.Required("elevation", "body", float64(m.Elevation)); err != nil {
		return err
	}

	return nil
}

func (m *Installation) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", int32(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *Installation) validateLocation(formats strfmt.Registry) error {

	if err := validate.Required("location", "body", m.Location); err != nil {
		return err
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *Installation) validateSponsor(formats strfmt.Registry) error {

	if err := validate.Required("sponsor", "body", m.Sponsor); err != nil {
		return err
	}

	if m.Sponsor != nil {
		if err := m.Sponsor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sponsor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Installation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Installation) UnmarshalBinary(b []byte) error {
	var res Installation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
