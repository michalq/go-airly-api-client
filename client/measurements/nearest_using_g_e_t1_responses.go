// Code generated by go-swagger; DO NOT EDIT.

package measurements

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/michalq/go-airly-api-client/models"
)

// NearestUsingGET1Reader is a Reader for the NearestUsingGET1 structure.
type NearestUsingGET1Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NearestUsingGET1Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewNearestUsingGET1OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewNearestUsingGET1NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewNearestUsingGET1OK creates a NearestUsingGET1OK with default headers values
func NewNearestUsingGET1OK() *NearestUsingGET1OK {
	return &NearestUsingGET1OK{}
}

/*NearestUsingGET1OK handles this case with default header values.

Measurements of the installation nearest to given point
*/
type NearestUsingGET1OK struct {
	Payload *models.Measurements
}

func (o *NearestUsingGET1OK) Error() string {
	return fmt.Sprintf("[GET /v2/measurements/nearest][%d] nearestUsingGET1OK  %+v", 200, o.Payload)
}

func (o *NearestUsingGET1OK) GetPayload() *models.Measurements {
	return o.Payload
}

func (o *NearestUsingGET1OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Measurements)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNearestUsingGET1NotFound creates a NearestUsingGET1NotFound with default headers values
func NewNearestUsingGET1NotFound() *NearestUsingGET1NotFound {
	return &NearestUsingGET1NotFound{}
}

/*NearestUsingGET1NotFound handles this case with default header values.

No installation was found within given distance from point
*/
type NearestUsingGET1NotFound struct {
}

func (o *NearestUsingGET1NotFound) Error() string {
	return fmt.Sprintf("[GET /v2/measurements/nearest][%d] nearestUsingGET1NotFound ", 404)
}

func (o *NearestUsingGET1NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
