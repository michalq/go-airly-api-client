// Code generated by go-swagger; DO NOT EDIT.

package measurements

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewMapPointMeasurementsUsingGETParams creates a new MapPointMeasurementsUsingGETParams object
// with the default values initialized.
func NewMapPointMeasurementsUsingGETParams() *MapPointMeasurementsUsingGETParams {
	var (
		indexTypeDefault = string("AIRLY_CAQI")
		latDefault       = float64(50.062006)
		lngDefault       = float64(19.940984)
	)
	return &MapPointMeasurementsUsingGETParams{
		IndexType: &indexTypeDefault,
		Lat:       latDefault,
		Lng:       lngDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewMapPointMeasurementsUsingGETParamsWithTimeout creates a new MapPointMeasurementsUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewMapPointMeasurementsUsingGETParamsWithTimeout(timeout time.Duration) *MapPointMeasurementsUsingGETParams {
	var (
		indexTypeDefault = string("AIRLY_CAQI")
		latDefault       = float64(50.062006)
		lngDefault       = float64(19.940984)
	)
	return &MapPointMeasurementsUsingGETParams{
		IndexType: &indexTypeDefault,
		Lat:       latDefault,
		Lng:       lngDefault,

		timeout: timeout,
	}
}

// NewMapPointMeasurementsUsingGETParamsWithContext creates a new MapPointMeasurementsUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewMapPointMeasurementsUsingGETParamsWithContext(ctx context.Context) *MapPointMeasurementsUsingGETParams {
	var (
		indexTypeDefault = string("AIRLY_CAQI")
		latDefault       = float64(50.062006)
		lngDefault       = float64(19.940984)
	)
	return &MapPointMeasurementsUsingGETParams{
		IndexType: &indexTypeDefault,
		Lat:       latDefault,
		Lng:       lngDefault,

		Context: ctx,
	}
}

// NewMapPointMeasurementsUsingGETParamsWithHTTPClient creates a new MapPointMeasurementsUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewMapPointMeasurementsUsingGETParamsWithHTTPClient(client *http.Client) *MapPointMeasurementsUsingGETParams {
	var (
		indexTypeDefault = string("AIRLY_CAQI")
		latDefault       = float64(50.062006)
		lngDefault       = float64(19.940984)
	)
	return &MapPointMeasurementsUsingGETParams{
		IndexType:  &indexTypeDefault,
		Lat:        latDefault,
		Lng:        lngDefault,
		HTTPClient: client,
	}
}

/*MapPointMeasurementsUsingGETParams contains all the parameters to send to the API endpoint
for the map point measurements using g e t operation typically these are written to a http.Request
*/
type MapPointMeasurementsUsingGETParams struct {

	/*IndexType
	  Select index which should be returned in response

	*/
	IndexType *string
	/*Lat
	  Latitude

	*/
	Lat float64
	/*Lng
	  Longitude

	*/
	Lng float64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the map point measurements using g e t params
func (o *MapPointMeasurementsUsingGETParams) WithTimeout(timeout time.Duration) *MapPointMeasurementsUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the map point measurements using g e t params
func (o *MapPointMeasurementsUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the map point measurements using g e t params
func (o *MapPointMeasurementsUsingGETParams) WithContext(ctx context.Context) *MapPointMeasurementsUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the map point measurements using g e t params
func (o *MapPointMeasurementsUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the map point measurements using g e t params
func (o *MapPointMeasurementsUsingGETParams) WithHTTPClient(client *http.Client) *MapPointMeasurementsUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the map point measurements using g e t params
func (o *MapPointMeasurementsUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIndexType adds the indexType to the map point measurements using g e t params
func (o *MapPointMeasurementsUsingGETParams) WithIndexType(indexType *string) *MapPointMeasurementsUsingGETParams {
	o.SetIndexType(indexType)
	return o
}

// SetIndexType adds the indexType to the map point measurements using g e t params
func (o *MapPointMeasurementsUsingGETParams) SetIndexType(indexType *string) {
	o.IndexType = indexType
}

// WithLat adds the lat to the map point measurements using g e t params
func (o *MapPointMeasurementsUsingGETParams) WithLat(lat float64) *MapPointMeasurementsUsingGETParams {
	o.SetLat(lat)
	return o
}

// SetLat adds the lat to the map point measurements using g e t params
func (o *MapPointMeasurementsUsingGETParams) SetLat(lat float64) {
	o.Lat = lat
}

// WithLng adds the lng to the map point measurements using g e t params
func (o *MapPointMeasurementsUsingGETParams) WithLng(lng float64) *MapPointMeasurementsUsingGETParams {
	o.SetLng(lng)
	return o
}

// SetLng adds the lng to the map point measurements using g e t params
func (o *MapPointMeasurementsUsingGETParams) SetLng(lng float64) {
	o.Lng = lng
}

// WriteToRequest writes these params to a swagger request
func (o *MapPointMeasurementsUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IndexType != nil {

		// query param indexType
		var qrIndexType string
		if o.IndexType != nil {
			qrIndexType = *o.IndexType
		}
		qIndexType := qrIndexType
		if qIndexType != "" {
			if err := r.SetQueryParam("indexType", qIndexType); err != nil {
				return err
			}
		}

	}

	// query param lat
	qrLat := o.Lat
	qLat := swag.FormatFloat64(qrLat)
	if qLat != "" {
		if err := r.SetQueryParam("lat", qLat); err != nil {
			return err
		}
	}

	// query param lng
	qrLng := o.Lng
	qLng := swag.FormatFloat64(qrLng)
	if qLng != "" {
		if err := r.SetQueryParam("lng", qLng); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
