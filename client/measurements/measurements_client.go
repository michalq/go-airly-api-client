// Code generated by go-swagger; DO NOT EDIT.

package measurements

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new measurements API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for measurements API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
InstallationMeasurementsUsingGET gets measurements for installation

Returns detailed measurements (current, historical and future) for an installation.
History and forecast are in 1h timeframes for 24h in past and future, sorted in ascending order.
Returns 404 in case installation doesn't exist.
*/
func (a *Client) InstallationMeasurementsUsingGET(params *InstallationMeasurementsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*InstallationMeasurementsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstallationMeasurementsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "installationMeasurementsUsingGET",
		Method:             "GET",
		PathPattern:        "/v2/measurements/installation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InstallationMeasurementsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InstallationMeasurementsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for installationMeasurementsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MapPointMeasurementsUsingGET gets measurements for a point on map

Returns detailed measurements (current, historical and future) for a map point, which can be interpolated from nearby installations.
History and forecast are in 1h timeframes for 24h in past and future, sorted in ascending order.
*/
func (a *Client) MapPointMeasurementsUsingGET(params *MapPointMeasurementsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*MapPointMeasurementsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMapPointMeasurementsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "mapPointMeasurementsUsingGET",
		Method:             "GET",
		PathPattern:        "/v2/measurements/point",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MapPointMeasurementsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MapPointMeasurementsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for mapPointMeasurementsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NearestUsingGET1 gets measurements from nearest installation

Returns detailed measurements (current, historical and future) from the installation which is closest to a given point, but not further than specified distance limit (in km).
History and forecast are in 1h timeframes for 24h in past and future, sorted in ascending order.
Returns 404 in case no installation could be found within the given distance from point.
*/
func (a *Client) NearestUsingGET1(params *NearestUsingGET1Params, authInfo runtime.ClientAuthInfoWriter) (*NearestUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNearestUsingGET1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nearestUsingGET_1",
		Method:             "GET",
		PathPattern:        "/v2/measurements/nearest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NearestUsingGET1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NearestUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for nearestUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
